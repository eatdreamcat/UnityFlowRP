using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace UnityEngine.Rendering.FlowPipeline
{
    // todo: [AddComponentMenu("")] // Hide in menu
    [DisallowMultipleComponent, ExecuteAlways]
    [RequireComponent(typeof(Camera))]
    
    public class FlowRPAdditionalCameraData : MonoBehaviour, IFrameSettingsHistoryContainer, IAdditionalData
    {

        #region Public
        
        /// <summary>
        /// Anti-aliasing mode.
        /// </summary>
        public enum AntialiasingMode
        {
            /// <summary>No Anti-aliasing.</summary>
            [InspectorName("No Anti-aliasing")]
            None,
            /// <summary>FXAA.</summary>
            [InspectorName("Fast Approximate Anti-aliasing (FXAA)")]
            FastApproximateAntialiasing,
            /// <summary>Temporal anti-aliasing.</summary>
            [InspectorName("Temporal Anti-aliasing (TAA)")]
            TemporalAntialiasing,
            /// <summary>SMAA.</summary>
            [InspectorName("Subpixel Morphological Anti-aliasing (SMAA)")]
            SubpixelMorphologicalAntiAliasing
        }
        
        
        /// <summary>
        /// Clear mode for the camera background.
        /// </summary>
        public enum ClearColorMode
        {
            /// <summary>Clear the background with the sky.</summary>
            Sky,
            /// <summary>Clear the background with a constant color.</summary>
            Color,
            /// <summary>Don't clear the background.</summary>
            None
        };
        
        
        /// <summary>Clear depth as well as color.</summary>
        public bool clearDepth = true;
        /// <summary>Clear mode for the camera background.</summary>
        public ClearColorMode clearColorMode = ClearColorMode.Sky;

        #endregion
        
        #region Internal

        
        [ExcludeCopy]
        internal ProfilingSampler profilingSampler = new ProfilingSampler(FlowUtility.ComputeCameraName("Main Camera"));
        
        
        // This is called at the creation of the Additional Camera Data, to convert the legacy camera settings to 
        // TODO: why cant declare internal type ? 
        public static void InitDefaultFlowRPAdditionalCameraData(FlowRPAdditionalCameraData cameraData)
        {
            var camera = cameraData.gameObject.GetComponent<Camera>();

            cameraData.clearDepth = camera.clearFlags != CameraClearFlags.Nothing;

            if (camera.clearFlags == CameraClearFlags.Skybox)
                cameraData.clearColorMode = ClearColorMode.Sky;
            else if (camera.clearFlags == CameraClearFlags.SolidColor)
                cameraData.clearColorMode = ClearColorMode.Color;
            else     // None
                cameraData.clearColorMode = ClearColorMode.None;
        }
        

        #endregion

        #region Private

        void UpdateDebugCameraName()
        {
            // Move the garbage generated by accessing name outside of HDRP
            profilingSampler = new ProfilingSampler(FlowUtility.ComputeCameraName(name));

            // if (name != m_CameraRegisterName)
            // {
            //     UnRegisterDebug();
            //     RegisterDebug();
            // }
        }
        

        #endregion
        
    }


    /// <summary>
    /// Contains extension methods for Camera class.
    /// </summary>
    public static class CameraExtensions
    {
        public static FlowRPAdditionalCameraData GetFlowRPAdditionalCameraData(this Camera camera)
        {
            var gameObject = camera.gameObject;
            bool componentExists = gameObject.TryGetComponent<FlowRPAdditionalCameraData>(out var cameraData);
            if (!componentExists)
                cameraData = gameObject.AddComponent<FlowRPAdditionalCameraData>();

            return cameraData;
        }
    }

    public interface IFrameSettingsHistoryContainer
    {
    }
}